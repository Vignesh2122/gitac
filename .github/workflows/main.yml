name: Secure Scan Workflow

on:
  push:
    branches: [ "main" ]
  pull_request:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  security-events: write
  id-token: write

env:
  SONAR_PROJECT_KEY: my-project   # replace with your SonarQube project key
  JAVA_VERSION: '21'
  DOCKER_IMAGE_NAME: my-app

jobs:
  scan:
    name: Build & Security Scans
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup JDK
        uses: actions/setup-java@v5
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: temurin
          cache: maven

      # ---- Maven Build ----
      - name: Maven Build
        run: mvn -B clean package -DskipTests=true

      - name: Archive Build Artifacts
        run: zip -r build-artifacts.zip target/
      - uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: build-artifacts.zip

      # ---- Gitleaks Scan ----
      - name: Gitleaks Secret Scan
        uses: gitleaks/gitleaks-action@v2
        with:
          args: detect --source . --no-git --report-path gitleaks-report.json --report-format json --exit-code 1

      # ---- CodeQL Scan ----
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: java

      - name: Build Project for CodeQL
        run: mvn -B clean package -DskipTests=true

      # ---- SonarQube Scan (main branch only) ----
      - name: SonarQube Scan
        if: github.ref == 'refs/heads/develop'
        env:
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          mvn -B sonar:sonar \
            -Dsonar.projectKey=${{ env.SONAR_PROJECT_KEY }} \
            -Dsonar.host.url=${{ env.SONAR_HOST_URL }} \
            -Dsonar.login=${{ env.SONAR_TOKEN }}

      # ---- Docker & Trivy Scan ----
      - name: Build Docker Image
        run: |
          IMAGE_TAG=${{ github.sha }}
          docker build -t my-app:${IMAGE_TAG} .

      - name: Trivy Scan
        uses: aquasecurity/trivy-action@0.20.0
        with:
          image-ref: my-app:${{ github.sha }}
          format: html
          output: trivy-report.html

      - name: Archive Trivy Report
        run: zip trivy-report.zip trivy-report.html
      - uses: actions/upload-artifact@v4
        with:
          name: trivy-report
          path: trivy-report.zip

      # ---- Notify Teams on Failure ----
      - name: Notify Teams on Failure
        if: failure()
        uses: jdcargile/ms-teams-notification@v1.4
        with:
          github-token: ${{ github.token }}
          ms-teams-webhook-uri: ${{ secrets.TEAMS_WEBHOOK }}
          notification-summary: "Security Scan Failed - ${{ github.repository }}"
          notification-color: dc3545
          timezone: UTC
